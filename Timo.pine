// A simple trend-following strategy using multiple moving averages
// and price action to generate entries and additions.
// Best for trending markets.
// Â© timoanttila

//@version=6
indicator("Trend Continuation [Timo]", shorttitle="Trend", overlay=true, dynamic_requests=true)

// ----------
//  Moving Averages
// ----------

group1 = "Moving Averages"

base_length = input.int(50, title="Base MA Length", minval=9, group=group1)
base_type = input.string("SMA", title="Base MA Type", options=["SMA", "EMA"], group=group1)

base_daily_length = input.int(20, title="Daily Base MA Length", minval=9, group=group1)
base_daily_type = input.string("SMA", title="Daily Base MA Type", options=["SMA", "EMA"], group=group1)

short_length = input.int(10, title="Short MA Length", minval=5, group=group1)
short_type = input.string("EMA", title="Short MA Type", options=["SMA", "EMA"], group=group1)

long_length = input.int(100, title="Long MA Length", minval=5, group=group1)
long_type = input.string("SMA", title="Long MA Type", options=["SMA", "EMA"], group=group1)

// Moving average calculation function
calculate_ma(ma_type, src, length) =>
    ma_type == "SMA" ? ta.sma(src, length) : ta.ema(src, length)

tf4h = timeframe.in_seconds() <= 14400

// Calculate the moving averages
ma_base_length = tf4h ? base_length : base_daily_length
ma_base_type = tf4h ? base_type : base_daily_type
ma_base = calculate_ma(ma_base_type, close, ma_base_length)
ma_short = calculate_ma(short_type, close, short_length)
ma_long = calculate_ma(long_type, close, long_length)

// Plot moving averages
plot(ma_base, color=color.yellow, linewidth=2, title="Base MA")
plot(ma_short, color=color.aqua, linewidth=1, title="Short MA")
plot(ma_long, color=color.white, linewidth=2, title="Long MA")

// ----------
//  Risk Management
// ----------

group2 = "Risk Management"
n_bars = input.int(defval=6, title="Number of clearing bars", minval=1, maxval=20, group=group2)
body_percent = input.float(50, "Min Body %", minval=10, maxval=100, group=group2)

// ----------
//  Global variables
// ----------

bool bull_candle = close > open
bool entry_more = false
float candle_full_size = math.abs(high - low)
int exit = 0
var bool color_change = false
var float entry_value = 0
var float pullback_value = 0
var int entry = 0
var int entry_more_index = 0
var int trend = 0

// ----------
//  Crossover
// ----------

bool cross_exit = ta.cross(close, ma_short)

if cross_exit and ((trend == 1 and ma_short > close and not bull_candle) or (trend == 2 and close > ma_short and bull_candle))
    color_change := false
    entry := 0
    entry_more := false
    entry_more_index := 0
    pullback_value := 0
    exit := trend

bool cross_bull = ta.crossover(close, ma_base)
bool cross_bear = ta.crossunder(close, ma_base)

if cross_bull or cross_bear
    color_change := false
    entry := 0
    entry_more := false
    entry_more_index := 0
    pullback_value := 0
    trend := cross_bull ? 1 : 2

// ----------
//  Candle validation
// ----------

float body_size = math.abs(close - open)
float avg_size = ta.sma(body_size, n_bars)
float candle_body_percent = candle_full_size > 0 ? (body_size / candle_full_size) * 100 : 0
float highest = ta.highest(high, n_bars)[1]
float lowest = ta.lowest(low, n_bars)[1]
bool candle_clear = trend == 1 ? close >= highest : close <= lowest
bool candle_valid = body_size > avg_size and candle_body_percent >= body_percent and candle_clear and volume > volume[1]

// ----------
//  Entry Logic
// ----------

if entry == 0 and candle_valid
    if close > open and close > ma_base
        entry := tf4h or ma_base > ma_long ? 1 : 0
    else if close < open and close < ma_base
        entry := tf4h or ma_base < ma_long ? 1 : 0
    if entry == 1
        entry_value := close

// ----------
//  Pullback
// ----------

bool cross_pullback_value = ta.cross(close, ma_short)

if entry == 2 and pullback_value == 0 and not color_change
    if trend == 1 and close < open
        pullback_value := open
    else if trend == 2 and close > open
        pullback_value := close

if pullback_value > 0 and candle_valid and ((trend == 1 and close > entry_value and close > pullback_value and close > open) or (trend == 2 and entry_value > close and pullback_value > close and open > close))
    entry_more := true
    entry_more_index := entry_more_index + 1
    entry_value := close
    pullback_value := 0

    if not color_change
        color_change := true

// ----------
//  Entry Signal Plots
// ----------

plotshape(entry == 1 and trend == 1, title="Long Entry", style=shape.triangleup, location=location.belowbar, color=color.white, size=size.tiny)
plotshape(entry == 1 and trend == 2, title="Short Entry", style=shape.triangledown, location=location.abovebar, color=color.white, size=size.tiny)
plotshape(trend == 1 and entry > 0 and entry_more, title="Long Add", style=shape.cross, location=location.belowbar, color=color.white, size=size.tiny)
plotshape(trend == 2 and entry > 0 and entry_more, title="Short Add", style=shape.cross, location=location.abovebar, color=color.white, size=size.tiny)

// ----------
//  Previous Day High and Low (Only active on < 4H)
// ----------

// User input for color
lineAndTextColor = input.color(color.white, "PDH/PDL line and text color", group="Previous Day")

// Detect new day
currDay = dayofweek
currSession = dayofmonth
newDay = currDay != currDay[1] or currSession != currSession[1]

// Get previous day high and low
[dh, dl] = request.security(syminfo.tickerid, "D", [high[1], low[1]], lookahead=barmerge.lookahead_on)

// Track the start bar for drawing
var int startBar = na
if tf4h and newDay
    startBar := bar_index

// Draw persistent lines and text
var line lineHigh = na
var line lineLow = na
var label textHigh = na
var label textLow = na

if tf4h and newDay
    if not na(lineHigh)
        line.delete(lineHigh)
    if not na(lineLow)
        line.delete(lineLow)
    if not na(textHigh)
        label.delete(textHigh)
    if not na(textLow)
        label.delete(textLow)

    // Calculate endBar for current day + 5 future bars
    endBar = bar_index + 5

    lineHigh := line.new(x1=startBar, y1=dh, x2=endBar, y2=dh, color=lineAndTextColor, width=1)
    lineLow  := line.new(x1=startBar, y1=dl, x2=endBar, y2=dl, color=lineAndTextColor, width=1)

    // Text label position (same as line end)
    transparent = color.new(lineAndTextColor, 100)
    textHigh := label.new(x=endBar, y=dh, text="PDH", style=label.style_label_left, textcolor=lineAndTextColor, size=size.small, color=transparent)
    textLow  := label.new(x=endBar, y=dl, text="PDL", style=label.style_label_left, textcolor=lineAndTextColor, size=size.small, color=transparent)

// Keep updating end of line and text position for current day + 5 future bars
if tf4h and not na(lineHigh)
    line.set_x2(lineHigh, bar_index + 5)
if tf4h and not na(lineLow)
    line.set_x2(lineLow, bar_index + 5)
if tf4h and not na(textHigh)
    label.set_x(textHigh, bar_index + 5)
if tf4h and not na(textLow)
    label.set_x(textLow, bar_index + 5)

// Alert condition
insidePrevDayRange = open >= dl and open <= dh
breaksAbove = high > dh and insidePrevDayRange
breaksBelow = low < dl and insidePrevDayRange

// ----------
// Alerts
// ----------

alertcondition(entry == 1, title="New Entry", message="New entry signal on {{ticker}}. Good luck and happy trading!")
alertcondition(entry == 1 or entry_more, title="New Entry or Addition", message="New entry or addition signal on {{ticker}}. Good luck and happy trading!")
alertcondition(entry == 1 and trend == 1, title="New Long Entry", message="New long entry signal on {{ticker}}.")
alertcondition(entry == 1 and trend == 2, title="New Short Entry", message="New short entry signal on {{ticker}}.")
alertcondition(entry_more and entry == 2, title="Add More", message="Possibility to add a new entry if you already have an active trade on {{ticker}}.")
alertcondition(tf4h and (breaksAbove or breaksBelow), title="Previous Day Range", message="Price opened inside previous day and broke above or below. Good luck and happy trading!")

// ----------
//  Reset dynamic values
// ----------

if entry == 1
    entry := 2

if entry_more
    entry_more := false

// ----------
//  Displacement
// ----------

rangeType = input.string("Open to Close", "Range Type", options = ['Open to Close', 'High to Low'], group="Displacement")
devPeriod = input.int(100, minval = 1, title = "Deviation Period", group="Displacement")
devMultiplier = input.int(3, minval = 0, title = "Deviation Multiplier", group="Displacement")

priceRange = rangeType == "Open to Close" ? math.abs(open - close) : high - low
rangeDeviation = ta.stdev(priceRange, devPeriod) * devMultiplier

priceGap = close[1] > open[1] ? high[2] < low[0] : low[2] > high[0]
isDisplaced = priceRange[1] > rangeDeviation[1] and priceGap

barcolor(isDisplaced ? color.maroon : na, offset = -1, title="Displacement Highlight Color")
alertcondition(isDisplaced, title="Elephant Bar", message="New Displacement / Elephant Bar detected!")