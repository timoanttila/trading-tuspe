//@version=6
indicator("Fair Value Gap", shorttitle="FVG", overlay=true, dynamic_requests=true)

base_length = input.int(50, title="Base MA Length", minval=9)
base_type = input.string("SMA", title="Base MA Type", options=["SMA", "EMA"])

calculate_ma(ma_type, src, length) =>
    ma_type == "SMA" ? ta.sma(src, length) : ta.ema(src, length)

ma_base = calculate_ma(base_type, close, base_length)
plot(ma_base, color=color.yellow, linewidth=2, title="Base MA")

var float fvg_min_size = input.float(0.2, "Min FVG Size", step=0.1)


var int trend = 0
var float fvg_value = 0
bool fvg_confirmed = false
int fvg_test = 0

// ----------
//  Trend
// ----------

cross_bull = ta.crossover(close, ma_base)
cross_bear = ta.crossunder(close, ma_base)

if cross_bull or cross_bear
    trend := cross_bull ? 1 : 2

// ----------
//  Candle validation
// ----------

float body_size = math.abs(close[1] - open[1])
float candle_full_size = math.abs(high[1] - low[1])
float avg_size = ta.sma(body_size, 6)
float candle_body_percent = candle_full_size > 0 ? (body_size / candle_full_size) * 100 : 0
float fvg_size = trend == 1 ? math.abs(low - high[2]) : math.abs(low[2] - high)

bool candle_valid = body_size > avg_size and candle_body_percent >= 40 and fvg_size >= (body_size * fvg_min_size)

// ----------
//  Entry Signal
// ----------

candle_check(bar1, bar2) =>
    bar1 > bar2

if trend == 1 and candle_valid and candle_check(low, high[2]) and candle_check(high, close[1]) and candle_check(close, open) and candle_check(close[1], open[1]) and candle_check(close[2], open[2])
    fvg_value := low
    fvg_confirmed := true
    box.new(bar_index[1], high[2], bar_index[1] + 3, low, bgcolor=color.new(color.green, 80), border_color=color.new(color.white, 75))
else if trend == 2 and candle_valid and high < low[2] and close[1] < open[1] and close < open
    fvg_value := high
    fvg_confirmed := true
    box.new(bar_index[1], low[2], bar_index[1] + 3, high, bgcolor=color.new(color.red, 80), border_color=color.new(color.white, 75))

// ----------
//  FVG trigger
// ----------

bool cross_fvg = ta.cross(close, fvg_value)

if fvg_value > 0 and cross_fvg
    fvg_test := close > open ? 1 : 2
    fvg_value := 0

// ----------
//  Entry Signal Plots
// ----------

plotshape(fvg_confirmed and trend == 1, title="FVG Bull", style=shape.triangleup, location=location.belowbar, color=color.white, size=size.tiny)
plotshape(fvg_confirmed and trend == 2, title="FVG Bear", style=shape.triangledown, location=location.abovebar, color=color.white, size=size.tiny)
plotshape(fvg_test == 1, title="FVG Bull", style=shape.cross, location=location.belowbar, color=color.white, size=size.tiny)
plotshape(fvg_test == 2, title="FVG Bear", style=shape.cross, location=location.abovebar, color=color.white, size=size.tiny)

// ----------
//  Previous Day High and Low (Only active on < 4H)
// ----------

// User input for color
lineAndTextColor = input.color(color.white, "PDH/PDL line and text color", group="Previous Day")

// Only run on timeframes less than 4 hours (14400000 ms)
pdActive = timeframe.in_seconds() <= 14400

// Detect new day
currDay = dayofweek
currSession = dayofmonth
newDay = currDay != currDay[1] or currSession != currSession[1]

// Get previous day high and low
[dh, dl] = request.security(syminfo.tickerid, "D", [high[1], low[1]], lookahead=barmerge.lookahead_on)

// Track the start bar for drawing
var int startBar = na
if pdActive and newDay
    startBar := bar_index

// Draw persistent lines and text
var line lineHigh = na
var line lineLow = na
var label textHigh = na
var label textLow = na

if pdActive and newDay
    if not na(lineHigh)
        line.delete(lineHigh)
    if not na(lineLow)
        line.delete(lineLow)
    if not na(textHigh)
        label.delete(textHigh)
    if not na(textLow)
        label.delete(textLow)

    // Calculate endBar for current day + 5 future bars
    endBar = bar_index + 5

    lineHigh := line.new(x1=startBar, y1=dh, x2=endBar, y2=dh, color=lineAndTextColor, width=1)
    lineLow  := line.new(x1=startBar, y1=dl, x2=endBar, y2=dl, color=lineAndTextColor, width=1)

    // Text label position (same as line end)
    transparent = color.new(lineAndTextColor, 100)
    textHigh := label.new(x=endBar, y=dh, text="PDH", style=label.style_label_left, textcolor=lineAndTextColor, size=size.small, color=transparent)
    textLow  := label.new(x=endBar, y=dl, text="PDL", style=label.style_label_left, textcolor=lineAndTextColor, size=size.small, color=transparent)

// Keep updating end of line and text position for current day + 5 future bars
if pdActive and not na(lineHigh)
    line.set_x2(lineHigh, bar_index + 5)
if pdActive and not na(lineLow)
    line.set_x2(lineLow, bar_index + 5)
if pdActive and not na(textHigh)
    label.set_x(textHigh, bar_index + 5)
if pdActive and not na(textLow)
    label.set_x(textLow, bar_index + 5)

// Alert condition
insidePrevDayRange = open >= dl and open <= dh
breaksAbove = high > dh and insidePrevDayRange
breaksBelow = low < dl and insidePrevDayRange

// ----------
// Alerts
// ----------

alertcondition(fvg_confirmed, title="New FVG", message="New fair value gap on {{ticker}}. Good luck and happy trading!")
alertcondition(fvg_test > 0, title="FVG Retest", message="FVG retest on {{ticker}}. Good luck and happy trading!")
alertcondition(fvg_confirmed or fvg_test > 0, title="New FVG or Retest", message="New fair value gap or retest on {{ticker}}. Good luck and happy trading!")
alertcondition(breaksAbove or breaksBelow, title="PDH / PDL", message="Price crossed previous day high or low on {{ticker}}. Good luck and happy trading!")
alertcondition(fvg_confirmed or fvg_test > 0 or breaksAbove or breaksBelow, title="All Alerts", message="New signal on {{ticker}}. Good luck and happy trading!")

// ----------
// Reset
// ----------

if fvg_confirmed
    fvg_confirmed := false

if fvg_test > 0
    fvg_test := 0